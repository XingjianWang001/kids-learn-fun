{
  "4.1 算法的概念与描述": [
    {
      "type": "explanation",
      "text": "小朋友，你知道怎么解决问题吗？比如，怎么做一道菜？你需要一个菜谱，一步一步跟着做。\n在编程里，解决问题的“菜谱”就叫做『算法』！\n算法就是解决问题的详细步骤和方法。",
      "points": 0
    },
    {
      "type": "explanation",
      "text": "我们可以用不同的方法来写下我们的『算法菜谱』：\n1. 用我们平时说话的语言（自然语言）。\n2. 用一些图形和箭头（流程图）。\n3. 用一种像说话又像代码的语言（伪代码）。",
      "points": 0
    },
    {
      "type": "multiple_choice",
      "text": "算法是什么？",
      "question": "算法是什么？",
      "options": [
        "一种编程语言",
        "解决问题的步骤和方法",
        "计算机的硬件",
        "一个变量的名字"
      ],
      "answer_index": 1,
      "hint": "算法是用来做什么的呢？想想做菜的菜谱。",
      "points": 15
    },
    {
      "type": "explanation",
      "text": "『自然语言』描述算法最简单，就是用我们平时说话的方式。\n比如，计算 1 到 n 的和的自然语言描述就是：\n“先准备一个盒子装总和，里面放0。然后从1开始，把每个数字依次放到盒子里（加起来），直到加到n。最后看看盒子里是多少。”\n虽然简单，但不够精确，容易有歧义。",
      "points": 0
    },
    {
      "type": "explanation",
      "text": "『伪代码』(Pseudocode) 就像是写给人类看的代码草稿。\n它没有严格的语法规则，但能清楚地表达算法的逻辑。\n我们写伪代码是为了在真正写C++代码之前，先把思路理清楚！",
      "points": 0
    },
    {
      "type": "fill_blank",
      "text": "伪代码是用来帮助谁在写代码前规划思路的？\n伪代码是给\"？ \"看的，C++代码是给计算机看的。",
      "question_parts": [
        "伪代码是给",
        "看的，C++代码是给计算机看的。"
      ],
      "answer": "人",
      "hint": "伪代码是为了帮助谁理解算法？",
      "points": 10
    },
    {
      "type": "explanation",
      "text": "比如，我们要计算一个数字 n 的『阶乘』(Factorial)。\n阶乘就是从1乘到 n 的结果。比如 5 的阶乘是 1 * 2 * 3 * 4 * 5 = 120。\n用伪代码怎么写呢？就像这样：\n（注意：这里的代码框里是伪代码，不是真正的C++哦！）",
      "code": "输入 n\nresult = 1\n对于 i 从 1 到 n\n    result = result * i\n输出 result",
      "points": 0
    },
    {
      "type": "explanation",
      "text": "我们来一步步理解计算 n 的阶乘的伪代码：\n1. 『输入 n』：先告诉程序我们要计算哪个数字的阶乘。\n2. 『result = 1』：准备一个盒子叫 result，用来装结果，一开始放1（因为乘法从1开始）。\n3. 『对于 i 从 1 到 n』：这是一个循环，让 i 从1开始，每次加1，直到 i 等于 n。\n4. 『result = result * i』：在循环里，把当前的 result 乘以 i，再把结果放回 result 盒子。\n5. 『输出 result』：循环结束后，result 盒子里的就是最终的阶乘结果，把它显示出来。",
      "points": 0
    },
    {
      "type": "explanation",
      "text": "现在，我们来试试写计算 1 到 n 的『和』的伪代码。\n比如计算 1 到 3 的和就是 1 + 2 + 3 = 6。",
      "points": 0
    },
    {
      "type": "fill_blank",
      "text": "计算 1 到 n 的和，伪代码的第一步通常是获取需要处理的数据。\n请填写计算 1 到 n 的和的伪代码的第一步：",
      "question_parts": [
        "",
        " n"
      ],
      "answer": "输入",
      "hint": "算法的第一步通常是获取需要处理的数据，用哪个词呢？",
      "points": 10
    },
    {
      "type": "fill_blank",
      "text": "计算 1 到 n 的和，我们需要一个变量来保存当前的『总和』，一开始它是 0。\n请填写伪代码中用来保存总和的变量初始化部分：",
      "question_parts": [
        "sum = ",
        ""
      ],
      "answer": "0",
      "hint": "一开始总和是多少呢？",
      "points": 10
    },
    {
      "type": "fill_blank",
      "text": "接下来是循环部分，我们需要从 1 开始，一直加到 n。\n伪代码可以用『对于』或者『循环』来表示。\n请填写循环的开始部分：",
      "question_parts": [
        "",
        " i 从 1 到 n"
      ],
      "answer": "对于",
      "hint": "看看阶乘的伪代码例子，循环是怎么开始的？",
      "points": 10
    },
    {
      "type": "fill_blank",
      "text": "在循环里面，每一步都要把当前的数字 i 加到总和 sum 里。\n请填写循环体内的操作：",
      "question_parts": [
        "sum = sum ",
        " i"
      ],
      "answer": "+",
      "hint": "我们要把 i 加到 sum 里，用什么符号？",
      "points": 10
    },
    {
      "type": "fill_blank",
      "text": "循环结束后，总和 sum 里就保存了 1 到 n 的和。\n最后一步是把结果告诉大家！\n请填写伪代码的最后一步：",
      "question_parts": [
        "",
        " sum"
      ],
      "answer": "输出",
      "hint": "计算完了，要把结果『显示』出来，用哪个词？",
      "points": 10
    },
    {
      "type": "explanation",
      "text": "除了伪代码，我们还可以用『流程图』来画出算法的步骤。\n流程图用不同的图形代表不同的动作，用箭头连接起来。\n就像画地图一样，指引计算机怎么走！",
      "points": 0
    },
    {
      "type": "explanation",
      "text": "流程图里有一些常用的图形：\n- 圆角矩形：表示『开始』和『结束』。\n- 平行四边形：表示『输入』和『输出』数据。\n- 矩形：表示进行某个『处理』或计算。\n- 菱形：表示需要做出『判断』，通常有两个出口（是/否）。\n- 箭头：连接图形，表示流程的方向。",
      "points": 0
    },
    {
      "type": "multiple_choice",
      "text": "在流程图中，哪个图形通常用来表示需要做出一个『判断』？",
      "question": "流程图中，哪个图形表示『判断』？",
      "options": [
        "矩形",
        "圆角矩形",
        "菱形",
        "平行四边形"
      ],
      "answer_index": 2,
      "hint": "想想看，哪个图形有两个出口，代表不同的选择？",
      "points": 15
    },
    {
      "type": "multiple_choice",
      "text": "那哪个图形表示『输入』或『输出』数据呢？",
      "question": "流程图中，哪个图形表示『输入』或『输出』？",
      "options": [
        "矩形",
        "圆角矩形",
        "菱形",
        "平行四边形"
      ],
      "answer_index": 3,
      "hint": "这个图形看起来有点像纸张倾斜的样子。",
      "points": 15
    },
    {
      "type": "multiple_choice",
      "text": "流程图有什么好处呢？",
      "question": "使用流程图描述算法的好处是什么？",
      "options": [
        "用图形表示，更直观易懂",
        "可以直接运行在计算机上",
        "只能描述简单的算法",
        "只能给机器人看"
      ],
      "answer_index": 0,
      "hint": "流程图是用什么来表示步骤的？这有什么优点？",
      "points": 15
    },
    {
      "type": "explanation",
      "text": "还记得判断一个数是不是偶数的算法吗？\n用流程图可以这样表示：\n1. 『开始』（圆角矩形）\n2. 『输入』数字 n（平行四边形）\n3. 『判断』n 除以 2 的余数是不是 0？（菱形）\n4. 如果『是』，就『输出』“偶数”（平行四边形），然后到『结束』。\n5. 如果『否』，就『输出』“奇数”（平行四边形），然后到『结束』。\n（箭头连接这些步骤）",
      "points": 0
    },
    {
      "type": "code_challenge",
      "text": "好了，我们已经用伪代码规划了计算 1 到 n 的和的算法。\n现在，请你把这个算法变成真正的C++代码吧！\n你需要从键盘输入一个整数 n (例如，输入5)，然后计算 1 + 2 + ... + n 的结果，并输出它。",
      "code": "// 这是一个C++程序的基本框架\n#include <iostream>\n// using namespace std; // 建议在main函数内或特定作用域使用\n\nint main() {\n  int n;\n  std::cout << \"请输入一个整数n: \";\n  std::cin >> n;\n  // 在这里写你的计算和输出代码\n  {user_code}\n  return 0;\n}",
      "question": "请编写C++代码，计算并输出从1加到输入的整数n的结果。例如，若输入n为5，则输出15。",
      "cpp_context": "#include <iostream>\n\nint main() {\n  int n;\n  // std::cout << \"请输入一个整数n: \"; // 实际程序中会提示输入\n  // std::cin >> n;\n  n = 5; // 假设输入为5用于测试\n  int sum_val = 0; // 声明一个变量来存储和\n  {user_code}\n  std::cout << sum_val << std::endl; // 输出计算得到的和\n  return 0;\n}",
      "expected_output": "15",
      "standard_answer_code": "for (int i = 1; i <= n; ++i) {\n    sum_val += i;\n  }",
      "hint": "你需要一个循环从1到n，用一个变量（比如 `sum_val`）累加求和。最后用 `std::cout` 输出结果。",
      "points": 20
    },
    {
      "type": "explanation",
      "text": "我们还提到了绘制流程图表示判断一个数是否为素数。\n素数是大于1，除了1和它本身，不能被其他正整数整除的数。\n这个算法会比判断偶数复杂一些，需要更多的判断和循环。\n虽然我们暂时不画出完整的流程图，但你知道可以用流程图来表示它。",
      "points": 0
    },
    {
      "type": "multiple_choice",
      "text": "我们学习了描述算法的三种方法。哪种方法最适合在写代码前清晰地规划复杂的逻辑？",
      "question": "哪种方法最适合规划复杂的算法逻辑？",
      "options": [
        "自然语言",
        "流程图和伪代码",
        "只用箭头",
        "唱歌"
      ],
      "answer_index": 1,
      "hint": "想想看，哪种方法既详细又不容易出错？",
      "points": 15
    },
    {
      "type": "explanation",
      "text": "算法是解决问题的核心，理解算法的概念和描述方法，能帮助你更好地学习编程！\n继续加油！",
      "points": 0
    }
  ]
}