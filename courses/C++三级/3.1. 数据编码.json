{
  "3.1. 数据编码": [
    {
      "type": "explanation",
      "text": "小朋友，我们知道计算机只认识0和1，就像开关一样，开是1，关是0。\n计算机用一串0和1来表示数字，比如用8个小盒子来存一个数字。",
      "points": 0
    },
    {
      "type": "explanation",
      "text": "对于正数，把它们变成0和1很简单，就像我们平时学的二进制。\n比如数字 5，用8个小盒子表示就是 00000101。\n最左边的第一个小盒子（位）我们用来表示正负，0表示正数，1表示负数。",
      "code": "// 5 的 8位二进制表示\n// 00000101\n// ^ 这个0表示它是正数",
      "points": 0
    },
    {
      "type": "explanation",
      "text": "这种最简单的表示方法，第一个盒子表示正负，后面盒子表示数字大小，叫做“原码”。\n正数的原码：第一个盒子是0，后面是它数字大小的二进制。",
      "code": "// +5 的原码 (8位)\n// 00000101\n\n// +10 的原码 (8位)\n// 00001010",
      "points": 0
    },
    {
      "type": "fill_blank",
      "text": "请写出数字 7 的 8位原码。",
      "question_parts": [
        "数字 7 的 8位原码是：",
        ""
      ],
      "answer": "00000111",
      "hint": "7 的二进制是 111，前面补0直到8位，第一位是0表示正数。",
      "points": 10
    },
    {
      "type": "explanation",
      "text": "那负数怎么表示呢？最直接的想法是把第一个盒子变成1。\n比如 -5，我们可能会想，是不是把 +5 的原码 00000101 的第一个0变成1，变成 10000101 呢？\n这种表示负数的方法，第一个盒子是1，后面是它数字大小的二进制，也叫做“原码”。",
      "code": "// +5 的原码 (8位): 00000101\n// -5 的原码 (8位): 10000101\n// ^ 这个1表示它是负数",
      "points": 0
    },
    {
      "type": "fill_blank",
      "text": "请写出数字 -10 的 8位原码。",
      "question_parts": [
        "数字 -10 的 8位原码是：",
        ""
      ],
      "answer": "10001010",
      "hint": "10 的二进制是 1010，前面补0直到8位，第一位是1表示负数。",
      "points": 15
    },
    {
      "type": "explanation",
      "text": "但是，用原码表示负数，计算机做加减法会很麻烦。\n比如计算 5 + (-5)。\n用原码就是 00000101 + 10000101。\n如果直接按二进制加法算，结果是 10001010，这是 -10 的原码！不对呀，5 + (-5) 应该是 0 才对。",
      "points": 0
    },
    {
      "type": "multiple_choice",
      "text": "为什么计算机不直接用原码来做加减法？",
      "question": "用原码表示负数时，直接进行二进制加法计算结果会是正确的吗？",
      "options": [
        "是的，总是正确的。",
        "不是的，结果可能会出错。",
        "只对正数正确，对负数不正确。",
        "只对负数正确，对正数不正确。"
      ],
      "answer_index": 1,
      "hint": "想想 5 + (-5) 的例子，结果是不是不对？",
      "points": 10
    },
    {
      "type": "explanation",
      "text": "为了让计算机做加减法更方便，科学家们发明了另外两种表示方法：反码 和 补码。\n计算机内部通常使用“补码”来表示和计算数字。",
      "points": 0
    },
    {
      "type": "explanation",
      "text": "我们先来看“反码”。\n正数的反码：和它的原码一样。",
      "code": "// +5 的原码: 00000101\n// +5 的反码: 00000101",
      "points": 0
    },
    {
      "type": "explanation",
      "text": "负数的反码：在它的原码基础上，符号位（第一个盒子）不变，其他位（后面的盒子）全部取反（0变1，1变0）。\n比如 -5 的原码是 10000101。\n符号位1不变，后面的 0000101 全部取反变成 1111010。\n所以 -5 的反码是 11111010。",
      "code": "// -5 的原码: 10000101\n//             ^\n// 符号位不变: 1\n// 其他位取反:  1111010 (这里原文有个笔误，应该是0000101取反为1111010)\n// -5 的反码: 11111010",
      "points": 0
    },
    {
      "type": "fill_blank",
      "text": "请写出 -8 的 8位反码。\n提示：先写出 -8 的原码，再转换成反码。",
      "question_parts": [
        "-8 的 8位反码是：",
        ""
      ],
      "answer": "11110111",
      "hint": "-8 的原码是 10001000。符号位1不变，后面的 0001000 取反得到 1110111。",
      "points": 15
    },
    {
      "type": "explanation",
      "text": "最后是“补码”。\n正数的补码：和它的原码、反码都一样。",
      "code": "// +5 的原码: 00000101\n// +5 的反码: 00000101\n// +5 的补码: 00000101",
      "points": 0
    },
    {
      "type": "explanation",
      "text": "负数的补码：在它的反码基础上，末位加 1。\n比如 -5 的反码是 11111010。\n在末位加 1：11111010 + 1 = 11111011。\n所以 -5 的补码是 11111011。",
      "code": "// -5 的反码: 11111010\n// 加 1      :       +1\n// --------------------\n// -5 的补码: 11111011",
      "points": 0
    },
    {
      "type": "fill_blank",
      "text": "请写出 -1 的 8位补码。\n提示：先写出 -1 的原码，再转反码，最后转补码。",
      "question_parts": [
        "-1 的 8位补码是：",
        ""
      ],
      "answer": "11111111",
      "hint": "-1 原码 10000001 -> 反码 11111110 -> 补码 11111110 + 1。",
      "points": 15
    },
    {
      "type": "explanation",
      "text": "总结一下：\n正数：原码 = 反码 = 补码\n负数：\n1. 原码：符号位1，后面是数字大小的二进制。\n2. 反码：原码符号位不变，其他位取反。\n3. 补码：反码末位加1。",
      "points": 0
    },
    {
      "type": "multiple_choice",
      "text": "计算机内部进行数字的加减运算时，通常使用的是哪种编码？",
      "question": "计算机用哪种编码来做加减法最方便？",
      "options": [
        "原码",
        "反码",
        "补码",
        "随便哪种都可以"
      ],
      "answer_index": 2,
      "hint": "我们学习了三种编码，其中一种是计算机最喜欢的，因为它让计算变简单。",
      "points": 10
    },
    {
      "type": "explanation",
      "text": "为什么补码这么神奇？因为用补码表示数字后，加法运算就可以统一进行，不需要区分正数和负数。\n比如计算 5 + (-5)，用补码就是 00000101 + 11111011。\n按二进制加法算：\n  00000101\n+ 11111011\n----------\n 100000000 (这里是9位，第9位溢出了，8位计算机只保留后8位)\n结果是 00000000，这正是 0 的补码！是不是很方便？",
      "points": 0
    },
    {
      "type": "explanation",
      "text": "现在我们知道计算机存的是补码，那怎么把一个补码变回我们认识的十进制数字呢？\n如果补码的第一个盒子是0（正数），直接把它当成普通二进制转十进制就行了。",
      "code": "// 补码 00000101 (第一个盒子是0)\n// 直接转十进制就是 1*2^0 + 0*2^1 + 1*2^2 = 1 + 4 = 5\n// 所以 00000101 是 +5",
      "points": 0
    },
    {
      "type": "fill_blank",
      "text": "请将 8位补码 00001100 转换为十进制数。",
      "question_parts": [
        "补码 00001100 对应的十进制数是：",
        ""
      ],
      "answer": "12",
      "hint": "这是一个正数的补码，直接按二进制转十进制。",
      "points": 10
    },
    {
      "type": "explanation",
      "text": "如果补码的第一个盒子是1（负数），转换回十进制需要两步：\n1. 补码先减 1。\n2. 结果再取反（符号位不变，其他位0变1，1变0）。\n3. 把取反后的结果当成正数的原码，转成十进制，然后加上负号。",
      "code": "// 补码 11111011 (第一个盒子是1，是负数)\n// 1. 减 1: 11111011 - 1 = 11111010\n// 2. 取反 (符号位不变): 11111010 -> 10000101\n// 3. 10000101 当正数原码转十进制: 0000101 -> 5\n//    所以 11111011 是 -5",
      "points": 0
    },
    {
      "type": "fill_blank",
      "text": "请将 8位补码 11111110 转换为十进制数。\n第一步：补码减 1。",
      "question_parts": [
        "补码 11111110 减 1 的结果是：",
        ""
      ],
      "answer": "11111101",
      "hint": "二进制减法，就像十进制借位一样。",
      "points": 15
    },
    {
      "type": "fill_blank",
      "text": "请将 8位补码 11111110 转换为十进制数。\n第二步：将上一步的结果 11111101 取反（符号位不变）。",
      "question_parts": [
        "11111101 取反（符号位不变）的结果是：",
        ""
      ],
      "answer": "10000010",
      "hint": "第一个1不变，后面的 1111101 全部变。",
      "points": 15
    },
    {
      "type": "fill_blank",
      "text": "请将 8位补码 11111110 转换为十进制数。\n第三步：将上一步的结果 10000010 当成正数的原码，转换为十进制，并加上负号。",
      "question_parts": [
        "10000010 对应的十进制数是：",
        ""
      ],
      "answer": "-2",
      "hint": "10000010 的符号位是1，表示负数。后面的 0000010 转十进制是 2。",
      "points": 15
    },
    {
      "type": "multiple_choice",
      "text": "将 8位补码 11110000 转换为十进制数。",
      "question": "补码 11110000 对应的十进制数是？",
      "options": [
        "-15",
        "-16",
        "-1",
        "-32"
      ],
      "answer_index": 1,
      "hint": "补码减1：11110000 - 1 = 11101111。取反（符号位不变）：10010000。后面的 0010000 转十进制是 16。",
      "points": 15
    },
    {
      "type": "explanation",
      "text": "在C++里，我们可以用 `std::bitset` 来方便地看到一个数字的二进制表示，对于负数，它显示的就是补码。",
      "code": "#include <iostream>\n#include <bitset>\n\nint main() {\n    int num = -5;\n    // bitset<8> 表示用8位来显示\n    std::bitset<8> bits(num);\n    std::cout << \"数字 \" << num << \" 的8位二进制(补码)是: \" << bits << std::endl;\n    return 0;\n}",
      "points": 0
    },
    {
      "type": "code_challenge",
      "text": "请修改下面的代码，让它输出数字 -10 的 8位二进制（补码）。",
      "code": "// 这是一个C++程序的基本框架\n#include <iostream>\n#include <bitset>\n\nint main() {\n    int num = -5; // 将这里的-5修改为-10\n    {user_code} // 用户需要写出显示 bitset 的代码\n    return 0;\n}",
      "question": "请将代码中的 `-5` 改为 `-10`，并使用 `std::bitset<8>` 输出 `num` 的8位二进制补码，末尾换行。",
      "cpp_context": "#include <iostream>\n#include <bitset>\n\nint main() {\n    int num = -10;\n    {user_code}\n    return 0;\n}",
      "expected_output": "11110110",
      "standard_answer_code": "std::bitset<8> bits(num);\n    std::cout << bits << std::endl;",
      "hint": "将 `int num = -5;` 改为 `int num = -10;`。然后用 `std::bitset<8> bits(num);` 和 `std::cout << bits << std::endl;` 来显示。",
      "points": 20
    },
    {
      "type": "multiple_choice",
      "text": "使用 `std::bitset<8>(num)` 来显示一个负数 `num` 的二进制时，它显示的是哪种编码？",
      "question": "`std::bitset` 显示负数的二进制是哪种编码？",
      "options": [
        "原码",
        "反码",
        "补码",
        "ASCII码"
      ],
      "answer_index": 2,
      "hint": "计算机内部存储和计算负数用的是哪种编码？`bitset` 显示的就是计算机内部存的样子。",
      "points": 15
    },
    {
      "type": "fill_blank",
      "text": "请写出 -7 的 8位反码。",
      "question_parts": [
        "-7 的 8位反码是：",
        ""
      ],
      "answer": "11111000",
      "hint": "-7 原码是 10000111。符号位不变，其他位取反。",
      "points": 15
    },
    {
      "type": "fill_blank",
      "text": "请写出 -12 的 8位补码。",
      "question_parts": [
        "-12 的 8位补码是：",
        ""
      ],
      "answer": "11110100",
      "hint": "-12 原码 10001100 -> 反码 11110011 -> 补码 11110011 + 1。",
      "points": 15
    },
    {
      "type": "fill_blank",
      "text": "请将 8位补码 11111101 转换为十进制数。",
      "question_parts": [
        "补码 11111101 对应的十进制数是：",
        ""
      ],
      "answer": "-3",
      "hint": "补码减1：11111101 - 1 = 11111100。取反（符号位不变）：10000011。后面的 0000011 转十进制是 3。",
      "points": 15
    }
  ]
}